#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_BA15_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Theoretische Grundlagen
\begin_inset CommandInset label
LatexCommand label
name "chap:Theoretische-Grundlagen"

\end_inset


\end_layout

\begin_layout Section
Parallel Redundancy Protocol (PRP)
\begin_inset CommandInset label
LatexCommand label
name "sec:PRP-Overview"

\end_inset


\end_layout

\begin_layout Standard
Bei PRP handelt es sich um ein Kommunikationsprotokoll auf Layer 2, welches
 eine Redundanz im Netzwerk gewährleistet und in den Knoten statt dem Netzwerk
 implementiert ist.
 Dies wird erreicht, indem ein Netzwerkknoten mit 2 Netzwerkinterfaces an
 zwei disjunkten, parallel betriebenen LANs (
\begin_inset Quotes fld
\end_inset

LAN_A
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

LAN_B
\begin_inset Quotes frd
\end_inset

) angeschlossen wird, die unabhängig von einander sind.
 Diese beiden LANs, die sich bezüglich Performance und Topologie unterscheiden
 können, ergeben zusammen ein PRP-Netzwerk.
 Ein solcher Knoten im PRP-Netzwerk wird 
\begin_inset Quotes fld
\end_inset

Double Attached Node
\begin_inset Quotes frd
\end_inset

 (oder auch u.a.
 
\begin_inset Quotes fld
\end_inset

Dual Attached Node
\begin_inset Quotes frd
\end_inset

), kurz DAN, genannt.
 Ein DAN hat dieselbe MAC-Adresse auf beiden Netzwerkinterfaces.
 Da es sich hier um DANs handelt, die PRP implementiert haben, werden sie
 auch mit DANP (
\begin_inset Quotes fld
\end_inset

Double Attached Node implementing PRP
\begin_inset Quotes frd
\end_inset

) bezeichnet.
 In dieser Arbeit sind DAN und DANP gleichbedeutend.
 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset


\end_layout

\begin_layout Standard
Wenn ein DANP etwas an einen anderen Netzwerkteilnehmer sendet, dupliziert
 er das Frame und übermittelt es über beide LANs.
 Beim Empfänger wird das Frame, das als Erstes ankommt, an die oberen Schichten
 weitergereicht und das Duplikat je nach nach Methode akzeptiert oder verworfen.
 Wie Duplikate erkennt und entfernt werden ist der Implementation überlassen.
 Auf die Duplikat-Handhabung wird genauer im Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Frame-Duplikaten"

\end_inset

 eingegangen.
 Für die Duplikaterzeugung und -erkennung ist die Link Redundancy Entitiy
 (LRE) zuständig, welche sich zwischen den beiden Netzwerkinterfaces und
 den oberen Netzwerkschichten in einem DAN befindet.
 Um diese Frame-Redundanz handhaben zu können, wird vom LRE beim Versand
 dem Frame am Ende ein Redundancy Control Trailer (RCT) angehängt, der beim
 Empfänger von dessen LRE wieder entfernt wird und anhand von dem RCT Duplikate
 erkannt werden können.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Tutorial_on_Parallel_Redundancy_Protocol_(PRP)"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/011_DANP_Node.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PRP-Netzwerk mit 2 kommunizierenden DANPs 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dieser RCT hat eine Grösse von 6 Bytes und beeinhaltet folgende Parameter
 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset

:
\end_layout

\begin_layout Itemize
Sequenznummer (16 Bit)
\begin_inset Newline newline
\end_inset

Jede Quelle hat lediglich einen Sequenznummernraum 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP_InES_ZHAW"

\end_inset


\end_layout

\begin_layout Itemize
LAN-Identifikator (4 Bit)
\begin_inset Newline newline
\end_inset

Dieser Parameter lautet entwerder 0xA für LAN_A oder 0xB für LAN_B
\end_layout

\begin_layout Itemize
LSDU-Size (12 Bit)
\begin_inset Newline newline
\end_inset

Umfasst die Grösse der LSDU (Link Service Data Unit) in Bytes zuzüglich
 der Grösse vom RCT
\end_layout

\begin_layout Itemize
PRP-Suffix (16 Bit)
\begin_inset Newline newline
\end_inset

Damit ein Frame als PRP-1-Frame erkannt wird, wird der Suffix auf 0x88FB
 gesetzt 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP-Industrial_IP"

\end_inset


\begin_inset Newline newline
\end_inset

Die Länge des Suffix hat den Grund, dass so mit einer sehr geringen Wahrscheinli
chkeit durch Zufall ein Nicht-PRP-Frame diesen Wert am Schluss des Frames
 (vor der Frame Check Sequence) hat und es als PRP-Frame erkannt wird, obwohl
 es keines wäre.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/011_prp_frame.png
	lyxscale 50
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PRP-Frame mit RCT 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Des Weiteren gibt es auch Netzwerkkomponenten, die nur über ein Netzwerkinterfac
e verfügen und lediglich an einem LAN des PRP-Netzwerks angeschlossen sind.
 Solche Geräte werden 
\begin_inset Quotes fld
\end_inset

Single Attached Node
\begin_inset Quotes frd
\end_inset

, kurz SAN, genannt.
 Diese können zwar mit allnen DANs kommunizieren, jedoch können nur andere
 SANs erreicht werden, die am selben LAN angeschlossen sind.
 SANs, die mit dem anderen LAN verbunden sind, können nicht erreicht werden.
 Ein SAN weiss nichts von PRP.
 Daher erzeugen SANs beim Frameversand keine Duplikate und hängen somit
 auch kein RCT an die Frames.
 Erhält ein SAN ein Frame mit einem RCT wird dies als zusätzliches Padding
 ohne Bedeutung wahrgenommen.
 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP-Hirschmann"

\end_inset


\end_layout

\begin_layout Standard
Eine zusätzliche Möglichkeit, um Geräte mit nur einem Netzwerkinterface
 an einem PRP-Netzwerk anzuschliessen, wäre über eine Redundancy Box (RedBox).
 Eine RedBox ist, wie ein DANP, über beide LANs im PRP-Netzwerk eingebunden
 und bietet weitere Anschlüsse für Geräte mit nur einem Interface.
 Ein solches Gerät, das über eine RedBox am PRP-Netzwerk teilnimmt, erscheint
 für die anderen Teilnehmer wie ein DAN und wird 
\begin_inset Quotes fld
\end_inset

Virtual Dual Attached Node
\begin_inset Quotes frd
\end_inset

 (VDAN) genannt.
 Somit fungiert die RedBox als Proxy für VDANs und hat aus Management-Gründen
 eine eigene IP-Adresse.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Tutorial_on_Parallel_Redundancy_Protocol_(PRP),PRP-Hirschmann"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/011_PRP-Netzwerk.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispielaufbau eines PRP-Netzwerks 
\begin_inset CommandInset citation
LatexCommand cite
key "Tutorial_on_Parallel_Redundancy_Protocol_(PRP)"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Durch diesen Ablauf und Aufbau wird garantiert, dass die Kommunikation zwischen
 den DANs und RedBoxen bei dem Ausfall eines LANs trotzdem bestehen bleibt,
 ohne Zeit für eine Umschaltung zu benötigen.
 Aufgrund dieser Eigenschaft wird PRP unter anderem als 
\begin_inset Quotes fld
\end_inset

seamless
\begin_inset Quotes frd
\end_inset

 oder 
\begin_inset Quotes fld
\end_inset

bumpless
\begin_inset Quotes frd
\end_inset

 bezeichnet.
 
\begin_inset CommandInset citation
LatexCommand cite
key "PPT_Ethernet_Redundancy_with_zero_switchover_time"

\end_inset


\end_layout

\begin_layout Standard
Da es sich bei PRP um ein Protokoll handelt, das von den MAC-Adressen der
 Netzwerkteilnehmer abhängig ist, wird kein IP-Routing unterstützt.
 Dies hat den Grund, weil ein IP-Router die Quell-MAC-Adresse im Ethernet-Frame
 ändert und ein Empfänger im PRP-Netzwerk die ursprüngliche Adresse benötigt,
 um Duplikate feststellen zu können.
 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP-Industrial_IP"

\end_inset


\end_layout

\begin_layout Standard
Für das Redundanzmanagement und das Überprüfen, ob andere DANs im Netzwerk
 anwesend sind, sendet jede LRE via Multicast regelmässig (laut Standard
 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset

 alle 2000 ms) sogenannte 
\begin_inset Quotes fld
\end_inset

PRP_Supervision
\begin_inset Quotes frd
\end_inset

-Frames.
 Erhält eine LRE ein solches Frame, erzeugt es einen Eintrag in seiner Node-Tabe
lle mit der MAC-Adresse des betreffenden Knotens (dieser ist im 
\begin_inset Quotes fld
\end_inset

MacAddress
\begin_inset Quotes frd
\end_inset

-Feld im 
\begin_inset Quotes fld
\end_inset

PRP_Supervision
\begin_inset Quotes frd
\end_inset

-Frame aufgeführt).
 Die LRE einer RedBox sendet für jedes seiner VDANs ein solches Frame, allerding
s werden die Informationen zur RedBox in zusätzlichen Feldern beigefügt.
 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset


\end_layout

\begin_layout Standard
Erhält ein Knoten nach einer gewissen Zeit (
\begin_inset Quotes fld
\end_inset

NodeForgetTime
\begin_inset Quotes frd
\end_inset

, standardmässig 60'000 ms oder 1 min) von einem bestimmten Knoten kein
 
\begin_inset Quotes fld
\end_inset

PRP_Supervision
\begin_inset Quotes frd
\end_inset

-Frame mehr, jedoch noch andere Frames von dieser Quelle über lediglich
 ein LAN, wird der Status dieser Quelle im Knoten von 
\begin_inset Quotes fld
\end_inset

DAN
\begin_inset Quotes frd
\end_inset

 zu 
\begin_inset Quotes fld
\end_inset

SanA
\begin_inset Quotes frd
\end_inset

 oder 
\begin_inset Quotes fld
\end_inset

SanB
\begin_inset Quotes frd
\end_inset

 geändert (hängt vom verwendeten LAN ab).
 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset


\end_layout

\begin_layout Subsection
PRP-1 stack (Software-Implementation)
\begin_inset CommandInset label
LatexCommand label
name "sub:Software-Implementation"

\end_inset


\end_layout

\begin_layout Subsubsection
Übersicht
\end_layout

\begin_layout Standard
In dieser Arbeit wird PRP in Form einer Software-Implementation im Endgerät
 betrachtet.
 Bei der Software handelt es sich um einen vom ZHAW Institute of Embedded
 Systems entwickelten Open Source User-Mode-Stack für Linux.
 Dieser wird als Zwischenschicht realisiert, der über ein virtuelles Netzwerkint
erface (
\begin_inset Quotes fld
\end_inset

PRP Driver
\begin_inset Quotes frd
\end_inset

) mit den höheren Schichten kommuniziert.
 Dabei erscheint der 
\begin_inset Quotes fld
\end_inset

PRP Driver
\begin_inset Quotes frd
\end_inset

 für diese Schichten wie ein normales Netzwerkinterface und stellt die LRE
 dar.
 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP-1_SW_Stack"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/011_PRP_User_Mode_Stack.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PRP-1 User Mode Stack 
\begin_inset CommandInset citation
LatexCommand cite
key "PRP-1_SW_Stack"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Schnitstelle zum Betriebssystem
\end_layout

\begin_layout Standard
Als Schnittstelle zwischen dem Betriebssystem und der PRP-1-stack-Applikation
 wird die pcap-Bibliothek 
\begin_inset CommandInset citation
LatexCommand cite
key "pcap-manpage"

\end_inset

 verwendet.
 Die pcap-Bibliothek stellt die Funktionalität zur Verfügung, um beispielsweise
 mittels Dateideskriptoren und/oder Sockets auf virtuelle sowie physische
 Netzwerk-Interfaces zuzugreifen.
 Mittels pcap ist es möglich, Zugriff auf sämtliche Datenströme, die ein
 Netzwerk-Interface passieren, zu erlangen.
 Diese Eigenschaft von pcap wird dazu verwendet, um die Netzwerk-Interfaces
 des Betriebssystems mit den Funktionalitäten des PRP-Protokolls zu verbinden.
\end_layout

\begin_layout Subsubsection
Frame-Duplikate
\begin_inset CommandInset label
LatexCommand label
name "sub:Frame-Duplikaten"

\end_inset


\end_layout

\begin_layout Standard
Bei der Handhabung von Frame-Duplikaten sind zwei Aspekte von zentraler
 Bedeutung.
 
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Duplikaterkennung:}
\end_layout

\end_inset

 Ein neues Frame trifft ein.
 Der Software-Stack muss zu diesem Zeitpunkt kontrollieren, ob ein Duplikat
 dieses Frames bereits vorgängig auf dem anderen Interface eingetroffen
 ist.
 Falls dies zutrifft, muss das Frame verworfen werden.
 Traf vorgängig kein Duplikat ein, muss das Frame in einer Datenstruktur
 über eine gewisse Zeit gehalten werden.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Aging:}
\end_layout

\end_inset

 Da der Speicher einer Maschine endlich ist, müssen die Metadaten der erhaltenen
 Frames nach einer gewissen Zeitspanne wieder aus der Datenstruktur entfernt
 werden.
 Dies wird mittels Software-Timer erreicht.
 Nach Ablauf eines gewissen Timer-Intervalls muss die Datenstruktur, in
 der die Metadaten der Frames gehalten werden, aktualisiert und die ältesten
 Frames verworfen werden.
\end_layout

\begin_layout Subsubsection
Software-Timer
\begin_inset CommandInset label
LatexCommand label
name "sub:SoftwareTimer"

\end_inset


\end_layout

\begin_layout Standard
Die Software-Implementation des PRP-1 stack verfügt über 3 Software-Timer,
 welche beim Starten der Applikation initialisiert und gestartet werden.
 Ein Timer-Tick dauert 20 ms.
\end_layout

\begin_layout Itemize

\series bold
Aging-Timer
\series default
 mit einem Intervall von 
\series bold
20 ms
\series default
.
 Bei jedem fünften Timer-Tick des Aging-Timers, also alle 100 ms, wird die
 Datenstruktur reorganisiert, indem das so genannte 
\begin_inset Quotes fld
\end_inset

Aging
\begin_inset Quotes frd
\end_inset

 durchgeführt wird.
 Die ältesten Frame-Metadaten werden somit wieder freigegeben.
\end_layout

\begin_layout Itemize

\series bold
Statistics-Timer
\series default
 mit einem Intervall von 
\series bold
1000 ms
\series default
.
 Nach Ablauf dieses Timer-Intervalls werden sämtliche Statistikwerte der
 gesamten PRP-Stack-Applikation ausgelesen und, falls so konfiguriert, auf
 der Konsole ausgegeben.
\end_layout

\begin_layout Itemize

\series bold
Supervision-Timer
\series default
 mit einem Intervall von 
\series bold
2000 ms
\series default
.
 Ist dieses Timer-Intervall abgelaufen, wird auf beiden physischen PRP-Interface
s ein Supervision-Frame transmittiert.
\end_layout

\begin_layout Subsubsection
Datenhaltung von Frame-Metadaten
\end_layout

\begin_layout Standard
Frames, die über einen PRP-Stack verarbeitet werden, weisen folgende Metadaten
 auf, welche für die Datenhaltung innerhalb der PRP-Stack-Applikation von
 zentraler Bedeutung sind: 
\end_layout

\begin_layout Itemize
MAC-Adresse des Senders (48 Bit)
\end_layout

\begin_layout Itemize
Sequenznummer (16 Bit)
\end_layout

\begin_layout Standard
Dieses Paar (Quell-MAC-Adresse und Sequenznummer) dient der eindeutigen
 Identifizierung eines PRP-Frames.
 Ein solches Identifizierungspaar kann sich also erst wiederholen, nachdem
 jede der Sequenznummern im Intervall, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$[0, 2^{16}-1] = [0, ..., 65535]$
\end_layout

\end_inset

, vom sendenden Host einmal verwendet wurde.
\end_layout

\begin_layout Standard
Die Zeit, welche vergeht, bis sich Sequenznummern wiederholen, hängt von
 der Geschwindigkeit, mit der die Netzwerk-Interfaces betrieben werden,
 ab.
 Bei allen Testreihen dieser Arbeit wurde eine Geschwindigkeit von 100 MBit/s
 verwendet, siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Netzwerkgeschwindigkeiten"

\end_inset

.
\end_layout

\begin_layout Standard
Maximale Anzahl Frames mit minimaler Grösse (64 Bytes), die pro Sekunde,
 respektive Millisekunde mit einem 100-MBit/s-Interface versendet werden
 können:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{equation*}
\end_layout

\begin_layout Plain Layout

n = 
\backslash
frac{
\backslash
frac{100 
\backslash
text{ MBit/s}}{8 
\backslash
text{ Bit/Byte}}}{
\backslash
splitfrac{7 
\backslash
text{ Byte Präambel} + 1 
\backslash
text{ Byte Start Frame Delimiter} + 60 
\backslash
text{ Byte min.
 Framegrösse} }{+ 6 
\backslash
text{ Byte PRP-1-RCT} + 4 
\backslash
text{ Byte Frame Check Sequence} + 12 
\backslash
text{ Byte Interframe Gap}}}
\end_layout

\begin_layout Plain Layout


\backslash
end{equation*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{equation*}
\end_layout

\begin_layout Plain Layout

= 
\backslash
frac{12500000 
\backslash
text{ Byte/s}}{90 
\backslash
text{ Byte}} = 138888.
\backslash
overline{88} 
\backslash
text{ Frames/s @ 100 MBit/s}
\end_layout

\begin_layout Plain Layout


\backslash
end{equation*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{equation*}
\end_layout

\begin_layout Plain Layout

= 138.
\backslash
overline{88} 
\backslash
text{ Frames/ms @ 100 MBit/s}
\end_layout

\begin_layout Plain Layout


\backslash
end{equation*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zeit, um 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2^{16}$
\end_layout

\end_inset

 Frames mit minimaler Grösse zu versenden:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{equation*}
\end_layout

\begin_layout Plain Layout

= 
\backslash
frac{2^{16}}{138.
\backslash
overline{88} 
\backslash
text{ Frames/ms @ 100 MBit/s}} = 471.8592 
\backslash
text{ ms}
\end_layout

\begin_layout Plain Layout


\backslash
end{equation*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im PRP-Standard 
\begin_inset CommandInset citation
LatexCommand cite
key "IEC_62439-3_2015"

\end_inset

 ist definiert, dass ein Eintrag von Frame-Metadaten maximal 400 ms in der
 Datenstruktur einer PRP-Implementation gehalten werden darf.
 Somit ist garantiert, dass sich keine unterschiedlichen Frames mit gleichen
 Metadaten (Quell-MAC-Adresse und Sequenznummer) in der Datenstruktur gehalten
 werden, da die aufgewendete Zeit, bis alle Sequenznummern bei einem sendenden
 Host durchlaufen sind, im schnellsten Fall mehr als 400 ms beträgt.
\end_layout

\begin_layout Paragraph
Datenstruktur
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset

Als Datenstruktur, um die Metadaten erstmals eingetroffener Frames zu halten,
 wird in der PRP-1-stack-Implementation eine Tabelle verwendet.
 Ein einzelner Tabelleneintrag ist wiederum eine Datenstruktur in Form einer
 Linked-List.
 Die Tabelle hat eine Grösse von 256 Einträgen.
 Aus der 16-Bit-Sequenznummer eines Frames wird aus den niederwertigen 8
 Bit ein 8 Bit breiter Hash-Wert gebildet.
 Dieser Hash-Wert repräsentiert sogleich die Index-Nummer für den Tabelleneintra
g.
\end_layout

\begin_layout Section
Offload-Mechanismen
\begin_inset CommandInset label
LatexCommand label
name "sec:Offload-Mechanismen"

\end_inset


\end_layout

\begin_layout Standard
Bei den Offload-Mechanismen handelt es sich um Features, die von gewissen
 Netzwerkkarten unterstützt werden und ein- oder ausgeschaltet werden können.
 In diesem Kapitel wird erläutert, was die unterschiedlichen Mechanismen
 im Groben bewirken.
 Hierbei liegen lediglich die Offload-Mechanismen, die von der in dieser
 Arbeit eingesetzen Hardware unterstützt werden, im Fokus.
 
\end_layout

\begin_layout Minisec
RX/TX Checksum Offload
\end_layout

\begin_layout Standard
Wird der Checksum-Offload-Mechanismus aktiviert, werden die IP-, TCP- und
 UDP-Checksummen von der Netzwerkkarte anstelle dem Prozessor berechnet.
 Dieser Mechanismus lässt sich individuell für das Senden und Empfangen
 konfigurieren.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Checksum_and_Segmentation_Offloading"

\end_inset


\end_layout

\begin_layout Minisec
Scatter-Gather
\end_layout

\begin_layout Standard
Ermöglicht es, dass man Daten von und in mehrere Buffer lesen und schreiben
 kann, die im Speicher voneinander getrennt sind (Die Speicherorte der Buffer
 sind in einem Vektor gespeichert).
 So wird die Anzahl von read- und write-System-Calls von Mehreren auf Einen
 gesetzt, was die CPU-Last erleichtert.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Scatter_Gather"

\end_inset


\end_layout

\begin_layout Minisec
TCP Segmentation Offload (TSO)
\end_layout

\begin_layout Standard
Bei TSO wird die Belastung der CPU minimiert, indem der Netzwerkkarte grosse
 Buffer angereiht werden, welche dann von dieser in separate Pakete gesplittet
 wird (Segmentierung).
 Ohne diese Segmentierung würde ein grosses TCP-Paket zuerst von der CPU
 segmentiert und einzeln an die NIC gesendet werden.
 Mit TSO ist es möglich, dass das grosse Frame direkt an die NIC gesendet
 wird und diese dann die Segmentierung vornimmt.
 
\begin_inset CommandInset citation
LatexCommand cite
key "TSO_GSO"

\end_inset


\end_layout

\begin_layout Minisec
UDP Fragmentation Offload (UFO)
\end_layout

\begin_layout Standard
Funktioniert ähnlich wie TSO mit dem Unterschied, dass hier das Fragmentieren
 von UDP-Datagrammen der NIC statt der CPU überlassen wird.
 
\begin_inset CommandInset citation
LatexCommand cite
key "UDP_Fragmentation_Offload"

\end_inset


\end_layout

\begin_layout Minisec
Generic Segmentation Offload (GSO)
\end_layout

\begin_layout Standard
Beim Generic Segmentation Offload handelt es sich um eine Generalisierung
 von TSO (nicht auf TCP limitiert).
 Hierbei wird ein grosses Frame nicht in der NIC segmentiert, sondern vor
 der Übermittlungs-Routine im Treiber der Netzwerkkarte.
 
\begin_inset CommandInset citation
LatexCommand cite
key "GRO,Generic_Segmentation_Offload,TSO_GSO"

\end_inset


\end_layout

\begin_layout Minisec
Generic Recieve Offload (GRO)
\end_layout

\begin_layout Standard
GRO ist ein Mechanismus, der die eintreffenden Fragmente in ein grösseres
 Paket zusammenfasst, so dass vom Computer aus, der die Daten erhält, nicht
 mehr die einzelnen Fragmente, sondern ein grosses Frame sichtbar ist.
 
\begin_inset CommandInset citation
LatexCommand cite
key "GRO"

\end_inset


\end_layout

\begin_layout Standard
Zusammengefasst kann man sagen, dass die Mechanismen TSO, UFO, GSO und GRO
 dazu dienen, mit einer MTU von 1500 Bytes umgehen zu können.
 Mit der ansteigenden Geschwindigkeit der Netzwerkkarten werden durch die
 Limitierung der MTU mehr Frames pro Sekunde erzeugt, was eine Steigerung
 der CPU-Belastung mit sich bringt.
 Damit diese Belastung nicht allzu stark ansteigt, werden durch die Offload-Mech
anismen Operationen für die Frame-Behandlung auf die Netzwerkkarte ausgelagert.
 
\begin_inset CommandInset citation
LatexCommand cite
key "GRO"

\end_inset


\end_layout

\begin_layout Minisec
RX/TX VLAN Acceleration
\end_layout

\begin_layout Standard
Mittels VLAN Acceleration wird beim Senden / Empfangen der VLAN-Header in
 der NIC hinzugefügt / gekürzt.
 
\begin_inset CommandInset citation
LatexCommand cite
key "vlan_accel"

\end_inset


\end_layout

\begin_layout Minisec
RX ntuple Filters and Actions
\end_layout

\begin_layout Standard
Dieses Feature ermöglicht es, dass die Netzwerkkarte Pakete je nach Filter
 in verschiedene Queues einordnet.
 So kann zum Beispiel einem Webserver eine eigene Recieve-Queue zugeordnet
 werden.
 Diese Filter und Queues können mit der Applikation ethtool konfiguriert
 werden.
 Es besteht die Möglichkeit unter anderem nach Protokoll, Quell- / Ziel-Adressen
 (MAC oder IP), Portnummern, VLANs, etc.
 zu filtern.
 
\begin_inset CommandInset citation
LatexCommand cite
key "ethtool,Scaling_Linux_NW_Stack"

\end_inset


\end_layout

\begin_layout Minisec
RX Hashing Offload
\end_layout

\begin_layout Standard
Anhand von 
\begin_inset Quotes fld
\end_inset

RX Hashing Offload
\begin_inset Quotes frd
\end_inset

 wird bei Erhalt eines Frames bereits in der Netzwerkkarte die Prüfsumme
 automatisch verifiziert.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Patent_TCPIP_Offload"

\end_inset


\end_layout

\begin_layout Section
TCP-Window-Size
\begin_inset CommandInset label
LatexCommand label
name "sec:TCP-Window-Size"

\end_inset


\end_layout

\begin_layout Standard
Beim Versand von TCP-Paketen kann neben dem Prozessor und der Netzwerkanbindung
 die TCP-Window-Size ein limitierender Faktor sein.
 Dabei handelt es sich um einen Wert, welcher von jedem Teilnehmer im TCP-Header
 mitgegeben wird.
 Dieser besagt in Bytes, wie viel an TCP-Paketen vom anderen gesendet werden
 kann, ohne eine Bestätigung zu erhalten.
 Wenn der Sender zum Beispiel vom Empfänger eine TCP-Window-Size von 16'384
 Bytes erhält, versendet der Sender diese Anzahl an Bytes, hält dann den
 Sendevorgang an und wartet auf eine Quittierung bevor er mit dem Sendevorgang
 weiterfährt.
 
\begin_inset CommandInset citation
LatexCommand cite
key "TCP_Win_Size_Scaling"

\end_inset


\end_layout

\begin_layout Standard
Ein Beispiel zur Ermittlung der optimalen TCP-Window-Size 
\begin_inset Formula $x$
\end_inset

 ist das Berechnen des Produkts von Bandbreite und RTT.
 Bei 100 MBit/s und einer RTT von 1ms (typischer RTT-Wert für ein maximal
 grosses Paket im lokalen Netzwerk via TCP 
\begin_inset CommandInset citation
LatexCommand cite
key "RTT"

\end_inset

) ergibt dies folgende Rechnung:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $x=\frac{100'000'000}{8}\,Byte/s\,*0.001\,s=12'500\,Byte$
\end_inset


\end_layout

\begin_layout Standard
Somit kann der Sender hier 12'500 Bytes an Daten senden, bevor er auf eine
 Quittierung vom Empfänger wartet.
 Anhand diesem TCP-Window-Size-Wert müsste der Sender in diesem Beispiel
 nicht warten, bis er die Quittierung für die ersten 6'250 Bytes (Bandbreite
 multipliziert mit der Dauer eines Weges: 0.5ms) vom Empfänger erhält, sondern
 könnte die Zeit, in welcher die Quittierung übertragen wird, für das Senden
 weiterer 6'250 Bytes nutzen.
 Dies liegt daran, dass die RTT als Faktor miteinbezogen wurde, welche den
 Hin- und Rückweg eines Pakets beinhaltet.
 
\begin_inset CommandInset citation
LatexCommand cite
key "TCP_Win_Size_Scaling"

\end_inset


\end_layout

\begin_layout Standard
Ob die TCP-Window-Size ein limitierender Faktor beim TCP-Verkehr dieser
 Arbeit darstellt wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Einfluss-von-TCP-Window-Size"

\end_inset

 untersucht.
\end_layout

\begin_layout Section
/proc-Dateisystem
\begin_inset CommandInset label
LatexCommand label
name "sec:proc-Dateisystem"

\end_inset


\end_layout

\begin_layout Standard
Bei dem /proc-Dateisystem handelt es sich um ein Pseudo-Dateisystem, welches
 als Schnittstelle für Datenstrukturen des Linux-Kernels dient.
 Üblicherweise ist dieses Dateisystem in einem Linux-Betriebssystem unter
 dem Pfad /proc eingebunden.
 
\begin_inset CommandInset citation
LatexCommand cite
key "procfs"

\end_inset

 
\end_layout

\begin_layout Standard
Jedes mal, wenn auf eine Datei aus dem /proc-Dateisystem ein read()-Systemcall
 ausgeführt wird, werden die aktuellsten Statistiken ausgelesen.
 Der Kernel besitzt einen Memory-Bereich, wo sämtliche Statistiken abgelegt
 werden.
 Zu diesem Memory-Bereich gehören auch Adressräume, die von Gerätetreibern
 von so genannten 
\begin_inset Quotes fld
\end_inset

Memory Mapped Hardware Devices
\begin_inset Quotes frd
\end_inset

 genutzt werden, um direkt auf Hardware-Ressourcen (Register) zugreifen
 zu können, dies wird mittels Memory-Mapped-I/O-Verfahren realisiert.
 /proc ist im Wesentlichen und sehr vereinfacht gesagt ein Zeiger auf diesen
 Kernel-Memory-Bereich.
\end_layout

\begin_layout Standard
Die Datenstrukturen können ausgelesen werden, um so die aktuellsten System-
 und Prozess-Informationen vom laufenden Linux-Kernel erhalten zu können.
 Zudem kann die Konfiguration des Linux-Kernels, während dieser in Betrieb
 ist, über das /proc-Dateisystem geändert werden.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Advanced_Linux_Programming"

\end_inset


\end_layout

\begin_layout Standard
Jeder Prozess erhält im /proc-Dateisystem einen Ordner, der die Prozess-ID-Numme
r als Namen trägt.
 In einem solchen Ordner (z.B.
 /proc/123, bei einem Prozess mit der ID 123) ist eine umfangreiche Auswahl
 an Daten zum entsprechenden Prozess aufzufinden.
 Nicht-prozessbezogene Informationen findet man im Wurzelverzeichnis des
 /proc-Dateisystems.
 Zum Beispiel befinden sich detaillierte Informationen zum Arbeitsspeicher
 unter /proc/meminfo.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Advanced_Linux_Programming"

\end_inset


\end_layout

\end_body
\end_document
