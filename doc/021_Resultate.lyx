#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_BA15_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Resultate und Interpretation 
\begin_inset CommandInset label
LatexCommand label
name "chap:Resultate"

\end_inset


\end_layout

\begin_layout Standard
In diesem Kapitel werden basierend auf den Messszenarien aus Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Ermittlung-der-Performance"

\end_inset

 Schlüsse in Form einer Interpretation bezüglich der PRP-Implementation
 (PRP-1 stack) gezogen.
 Die erzielten Messresultate sind ausser dem ersten Szenario in Kapitel
 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Messresultate"

\end_inset

 aufgeführt.
 Dies hat den Grund, dass verständlich gemacht werden soll, anhand welcher
 Resultatmenge jeweils interpretiert wurde.
\end_layout

\begin_layout Section
Szenario 01: Performance im PRP-Netzwerk
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-01:-Performance"

\end_inset


\end_layout

\begin_layout Standard
Die Interpretation dieses Szenarios befindet sich in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Interpretation"

\end_inset


\end_layout

\begin_layout Subsection
Messresultate
\begin_inset CommandInset label
LatexCommand label
name "sub:01-Messresultate"

\end_inset


\end_layout

\begin_layout Subsubsection
shck-Client
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/cpusrv01.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: CPU-Last, System- / Usertime des PRP-1
 stacks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/cpu_load_srv01.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: CPU-Last des PRP-1 stacks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/rxsrv01.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: RX-Bitrate [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/net_prp1_rx_bitrate_srv01.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: RX-Bitrate auf 
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

-Netzwerk-Interface [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/txsrv01.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: TX-Bitrate [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/net_prp1_tx_bitrate_srv01.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Client: TX-Bitrate auf 
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

-Netzwerk-Interface [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
shck-Server
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/cpusrv02.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: CPU-Last, System- / Usertime des PRP-1
 stacks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/cpu_load_srv02.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: CPU-Last des PRP-1 stacks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/rxsrv02.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: RX-Bitrate [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/net_prp1_rx_bitrate_srv02.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: RX-Bitrate auf 
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

-Netzwerk-Interface [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "_tex/01/txsrv02.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: TX-Bitrate [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/graph/01/net_prp1_tx_bitrate_srv02.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resultat Szenario 01 auf shck-Server: TX-Bitrate auf 
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

-Netzwerk-Interface [MBit/s]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Interpretation
\begin_inset CommandInset label
LatexCommand label
name "sub:Interpretation"

\end_inset


\end_layout

\begin_layout Standard
Die Resultate dieses Szenarios weisen bei den Netzwerklasten innerhalb der
 selben Übermittlungsart und des selben Lasttyps (sie unterscheiden sich
 nur in der Zeitspanne) keine markanten Unterschiede auf, was die Reproduzierbar
keit der Messungen beweist.
 Des Weiteren wird aus dieser Erkenntnis in diesem Kapitel nicht zwischen
 den Zeitspannen unterschieden.
\end_layout

\begin_layout Subsubsection
Limitierungen / Engpässe
\end_layout

\begin_layout Standard
Die Netzwerklasten mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset

 erreichen die theoretischen Grenzwerte (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Theoretische-Grenzwerte"

\end_inset

) und werden somit von der Netzwerkanbindung limitiert.
 Anhand der ermittelten Werte kann festgestellt werden, dass bei diesem
 Lasttyp die TCP-Datenströme im Vergleich zu UDP eine höhere CPU-Last verursache
n, jedoch die selben TX-Bitraten auf dem shck-Client und RX-Bitraten auf
 dem shck-Server erzielen (theoretischer Grenzwert).
 Eine weitere Abweichung dieser beiden Strömen mit selbem Lasttyp ist, dass
 der shck-Client bei TCP-Messungen Quittierungen und bei UDP-Messungen keine
 Antwort vom shck-Server erhält, was die höhere CPU-Last bei TCP erklärt.
\end_layout

\begin_layout Standard
Beim Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

 ist zwischen dem TCP- und UDP-Verkehr ein grosser Unterschied festzustellen.
 Ihre Gemeinsamkeit beträgt aber darin, dass beide Ströme nicht den theoretische
n Grenzwert erlangen.
 Bei der TCP-Last fällt hier jedoch aufgrund der Natur von TCP zusätzlich
 das Erhalten von Quittierungen vom Server an, weshalb hier im Gegensatz
 zur UDP-Last shck bzw.
 dessen UDP-/TCP-Socket mehr Leistung beansprucht.
 Daraus resultiert, dass weniger Ressourcen für das effektive Versenden
 von TCP-Paketen zur Verfügung steht.
 Somit erzielt bei diesem Lasttyp der UDP-Datenstrom beim PRP-1 stack eine
 höhere CPU-Last, kann jedoch durch den häufigeren Versand von Paketen auf
 dem Client eine höhere TX-Bitrate erzielen.
 Daraus lässt sich schliessen, dass der UDP-Verkehr des Lasttyps 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

 von der CPU limitiert wird.
 Beim TCP-Verkehr des selben Lasttyps stösst man ebenfalls auf einen Engpass
 durch den Prozessor, welcher durch das zusätzliche Verarbeiten von Quittierunge
n weiter verengt wird.
\end_layout

\begin_layout Standard
Zusammengefasst ergeben sich folgende Engpässe:
\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

: Engpass durch Prozessor
\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset

: Limitierung durch Netzwerkanbindung
\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

: Engpass durch Prozessor
\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset

: Limitierung durch Netzwerkanbindung
\end_layout

\begin_layout Subsubsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Standard
Bezüglich der Belastung des Prozessors durch den PRP-1 stack ist pro Übertragung
s- und Lasttyp folgende absteigende Reihenfolge ersichtlich:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
shck-Client
\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset


\begin_inset Newline newline
\end_inset

höchste CPU-Last
\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset


\begin_inset Newline newline
\end_inset

kleinste CPU-Last
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
shck-Server
\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset


\begin_inset Newline newline
\end_inset

höchste CPU-Last
\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
UDP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset


\begin_inset Newline newline
\end_inset

kleinste CPU-Last
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Den Resultaten ist des Weiteren zu entnehmen, das bei den Netzwerklasten
 über UDP (besonders mit dem hier vom Netzwerk limitierten Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset

) auf dem shck-Server mehr CPU-Last verursacht wird.
 Dies bedeutet, dass der PRP-1 stack für das Empfangen mehr Leistung beansprucht
 als für das Senden.
 Hierbei muss der Empfänger / Server auch Ressourcen für die Duplikaterkennung
 aufwenden, was den höheren CPU-Verbrauch für das Empfangen erklären würde.
\end_layout

\begin_layout Standard
Für Messungen mit TCP ist zu beachten, dass der PRP-1 stack in solchen Fällen
 TCP-Pakete sendet und Quittierungen vom Server erhält.
 Hier beansprucht lediglich der Lasttyp 
\begin_inset Quotes fld
\end_inset

MAX
\begin_inset Quotes frd
\end_inset

 mehr Rechenleistung vom Server als vom Client.
\end_layout

\begin_layout Standard
Bei der Netzwerklast via TCP mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

 ist die Differenz zwischen Client und Server zwar weniger markant als bei
 den anderen Netzwerklasten, jedoch werden hier weniger Pakete versandt
 als via UDP mit dem Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

.
 Dies resultiert aus der Tatsache, dass bei TCP der Client Quittierungen
 erhält und shck bzw.
 dessen TCP-Socket diese verarbeiten muss.
 Der PRP-1 stack erhält weniger CPU-Zeit zur Verfügung und kann somit weniger
 senden.
 Aus diesem Grund versendet der PRP-1 stack bei dieser Netzwerklast weniger
 Pakete als bei den anderen Datenströmen und beansprucht somit auch weniger
 Ressourcen, was die folgende Rechnung mit den ermittelten Werten (durchschnittl
iche TX-Bitrate von shck-Client auf Netzwerk-Interface 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset

) aufzeigt:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $Pakete_{TCP:MIN}=\left\lceil \frac{2.22\,MBit/s}{77\,Byte}\right\rceil =3'603\,Pakete$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $Pakete_{TCP:MAX}=\left\lceil \frac{98.7\,MBit/s}{1518\,Byte}\right\rceil =8'128\,Pakete$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $Pakete_{UDP:MAX}=\left\lceil \frac{98.7\,MBit/s}{1518\,Byte}\right\rceil =8'128\,Pakete$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $Pakete_{UDP:MIN}=\left\lceil \frac{8.43\,MBit/s}{70\,Byte}\right\rceil =15'054\,Pakete$
\end_inset


\end_layout

\begin_layout Standard
Bezüglich der durchschnittlich beanspruchten Netzwerklast ist ersichtlich,
 dass Client und Server dieselben Bitraten erzielen.
 Die RX-Bitraten des Clients entsprechen den TX-Bitraten des Servers so
 wie auch die TX-Bitraten des Clients zu den RX-Bitraten des Clients.
\end_layout

\begin_layout Standard
Letzten Endes unterscheiden sich die Messwerte von Client und Server lediglich
 in der beanspruchten CPU-Last, worauf im Profiling, siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Profiling"

\end_inset

, genauer eingegangen wird.
\end_layout

\begin_layout Subsubsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Standard
Die ermittelten Messwerte zeigen auf, dass sich der PRP-1 stack durchgehend
 mehr im Kernelspace (Systemtime) als im Userspace (Usertime) befindet.
 Somit beschäftigt sich der PRP-1 stack häufiger mit Betriebssystem-Funktionen
 als mit den administrativen Aufgaben des PRP-Protokolls.
\end_layout

\begin_layout Standard
Zu den Tätigkeiten im Kernel-/Userspace gehören u.a.:
\end_layout

\begin_layout Itemize
Kernelspace
\end_layout

\begin_deeper
\begin_layout Itemize
Kommunikation von und zum virtuellen Netzwerk-Interface 
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

 bzw.
 Datenströme mit Hardware austauschen
\end_layout

\begin_layout Itemize
Handhabung von Timern und Interrupts
\end_layout

\end_deeper
\begin_layout Itemize
Userspace
\end_layout

\begin_deeper
\begin_layout Itemize
Anfügen und Entfernen des RCTs am und vom Frame
\end_layout

\begin_layout Itemize
Organisation der Datenstruktur zur Duplikaterkennung (Aging, Einträge hinzufügen
 / löschen)
\end_layout

\end_deeper
\begin_layout Subsubsection
Profiling
\begin_inset CommandInset label
LatexCommand label
name "sub:Profiling"

\end_inset


\end_layout

\begin_layout Standard
Um die vorhergehenden Aussagen zum Verhalten des PRP-1 stacks additional
 zu belegen, wird ein Profiling mit dem Tool 
\begin_inset Quotes fld
\end_inset

perf
\begin_inset Quotes frd
\end_inset

 (siehe Tabelle 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:perf"

\end_inset

) erstellt.
 Das Profiling soll aufzeigen, welche Funktionen am meisten CPU-Zeit verbrauchen
, wie gross der Anteil an Kernelspace-Funktionen ist und wie auf dem gesamten
 Betriebssystem die Prozesse und deren Funktionen verteilt sind.
\end_layout

\begin_layout Standard
Um die Reports von perf grafisch darzustellen, werden sogenannte 
\begin_inset Quotes fld
\end_inset

Flame Graphs
\begin_inset Quotes frd
\end_inset

 eingesetzt.
 
\begin_inset CommandInset citation
LatexCommand cite
key "flamegraphs-home"

\end_inset

 
\end_layout

\begin_layout Paragraph
Interpretation eines Flame Graphs
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset

Die Interpretation eines Flame Graphs ist wie folgt zu verstehen:
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Abszissenachse:}
\end_layout

\end_inset

 Prozentualer zeitlicher Anteil, welcher eine Funktion auf der CPU verbraucht.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Ordinatenachse:}
\end_layout

\end_inset

 Anzeige des Call-Stacks aller Funktionsaufrufe.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Blau markierte Balken:}
\end_layout

\end_inset

 Übergang Userspace/Kernelspace, initiiert durch einen System-Call.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Restliche Farben:}
\end_layout

\end_inset

 Nicht von Bedeutung.
 Die Farben werden mit einem Zufallsgenerator ausgewählt.
 Die Rot/Orange/Gelb-Abstufungen dienen lediglich dazu, einzelne Balken
 optisch besser zu trennen.
\end_layout

\begin_layout Paragraph
Ausgangslage
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset

Für das Erstellen der Profildaten wurden die Betriebssysteme zweier Maschinen
 (srv03 und srv02) über einen Zeitraum von 60 Sekunden aufgezeichnet.
 Als Netzwerklast wurden TCP-Pakete verwendet, da die Client- und die Server-App
likation Daten versenden sowie empfangen.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
shck-Client (srv03)
\end_layout

\begin_layout Itemize
shck generiert TCP-Daten
\begin_inset Newline newline
\end_inset

mit maximaler Frame-Grösse
\begin_inset Newline newline
\end_inset

via PRP-Interface
\end_layout

\begin_layout Itemize
keine weiteren Prozesse,
\begin_inset Newline newline
\end_inset

welche CPU-Zeit beanspruchen
\begin_inset Newline newline
\end_inset

(ausser PRP-1 stack)
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
shck-Server (srv02)
\end_layout

\begin_layout Itemize
shck empfängt TCP-Daten
\begin_inset Newline newline
\end_inset

mit maximaler Frame-Grösse
\begin_inset Newline newline
\end_inset

via PRP-Interface
\end_layout

\begin_layout Itemize
keine weiteren Prozesse,
\begin_inset Newline newline
\end_inset

welche CPU-Zeit beanspruchen
\begin_inset Newline newline
\end_inset

(ausser PRP-1 stack)
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Alle Prozesse des Betriebssystems
\end_layout

\begin_layout Subparagraph
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset

shck-Client (Sender)
\end_layout

\begin_layout Subparagraph
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/perf-kernel_60s_all_procs_tcp_sender_ba.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph des shck-Clients, alle Prozesse
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
shck-Server (Empfänger)
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/perf-kernel_60s_all_procs_tcp_receiver_ba.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph des shck-Servers, alle Prozesse
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Werden alle Prozesse des Betriebssystems betrachtet, ist festzustellen,
 dass der PRP-1 stack beim Empfangen mehr CPU-Zeit zur Verfügung hat.
 Ein Grund dafür ist, dass der shck-Server signifikant weniger CPU-Zeit
 beansprucht, als der shck-Client, welcher die TCP-Pakete generieren und
 versenden muss.
 Der markante Anteil des idle-Prozesses, lässt sich dadurch erklären, dass
 das Profiling bezüglich aller Prozesse des Betriebssystems durchgeführt
 wurde und somit auch alle Ressourcen der Maschine (1 Core mit 2 CPUs) kumulativ
 miteingerechnet werden.
 Die Separierung zwischen Userspace- und Kernelspace-Funktionen wurde für
 diese Gesamtübersicht weggelassen.
\end_layout

\begin_layout Paragraph
Spezifischer Prozess PRP-1 stack
\end_layout

\begin_layout Subparagraph
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset

shck-Client (Sender)
\end_layout

\begin_layout Subparagraph
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/perf-kernel_60s_prp1_stack_tcp_sender_ba.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph des shck-Clients, spezifisch PRP-1 stack
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
shck-Server (Empfänger)
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/perf-kernel_60s_prp1_stack_tcp_receiver_ba.svg
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph des shck-Servers, spezifisch PRP-1 stack
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bei der detaillierten Betrachtung des PRP-1-stack-Prozesses fällt auf, dass,
 unabhängig davon ob Client oder Server, für das Senden von Frames generell
 mehr CPU-Zeit aufgewendet werden muss als für das Empfangen.
 Da bei der Lastengenerierung ausschliesslich Frames mit maximaler Grösse
 versendet werden, wird seitens des sendenden Hosts (Client) mehr Rechenzeit
 auf der CPU in Anspruch genommen, um die ausgehenden Frames zu verarbeiten.
 Beim Server müssen jeweils nur TCP-Ack-Messages versendet werden, was bedeutet,
 dass deutlich weniger Datenmengen verarbeitet werden müssen und somit weniger
 CPU-Zeit angefordert wird.
\end_layout

\begin_layout Standard
Die beiden Flame Graphs des PRP-1 stacks zeigen auf, dass die Applikation
 zwar als Userspace-Applikation gestartet wird, jedoch verbringt sie den
 grössten Teil ihrer Ausführungszeit im Kernelspace.
 Dies ist darauf zurückzuführen, dass der PRP-1 stack als Hauptaufgabe die
 Kommunikation mit dem virtuellen PRP-Interface wahrzunehmen hat.
 Das Analysieren von Frames und Verwalten der Duplikattabelle stellt dagegen
 einen verhältnismässig kleinen Anteil dar.
\end_layout

\begin_layout Subparagraph
PRP-Transmit-Funktion
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/PRP_T_transmit.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph der PRP-Transmit-Funktion
\begin_inset CommandInset label
LatexCommand label
name "fig:Flame-Graph-der"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Beim Versenden von Frames wird im PRP-Stack die Funktion 
\begin_inset Quotes fld
\end_inset

PRP_T_transmit
\begin_inset Quotes frd
\end_inset

 aufgerufen.
 Dies geschieht im Userspace.
 Um die zu sendenden Daten zu transmittieren, müssen diese in den Kernelspace
 kopiert werden, was mit dem Aufruf der Funktion 
\begin_inset Quotes fld
\end_inset

__copy_from_user_ll
\begin_inset Quotes frd
\end_inset

 vollzogen wird.
 Der zeitliche Anteil, um User-Daten in den Kernel-Space zu kopieren, hängt
 von der Grösse der zu versendenden Pakete ab.
 Anschliessend werden für das Transmittieren zahlreiche Kernelspace-Funktionen
 aufgerufen.
\end_layout

\begin_layout Subparagraph
PRP-Receive-Funktion
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/PRP_T_receive.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flame Graph der PRP-Receive-Funktion
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Receive-Funktion des PRP-1 stacks ist in der obigen Abbildung als komplette
 Kernelspace-Funktion abgebildet.
 Dies liegt daran, dass die Callback-Funktion 
\begin_inset Quotes fld
\end_inset

PcapReceive_callback
\begin_inset Quotes frd
\end_inset

 von pcap-Funktionen aus dem Kernelspace aufgerufen wird, sobald ein Frame
 eintrifft, welches verarbeitet werden muss.
 Beim Empfang von Frames, sind es die Funktionen des PRP-1 stacks, namentlich
 
\begin_inset Quotes fld
\end_inset

PRP_DiscardAlgorithm_T_search_entry
\begin_inset Quotes frd
\end_inset

 für das Durchsuchen der Duplikattabelle und das Aufnehmen neuer Frames
 in die Duplikattabelle, 
\begin_inset Quotes fld
\end_inset

PRP_Trailer_T_get_trailer
\begin_inset Quotes frd
\end_inset

 um den RCT aus einem ankommenden Frame zu lesen und 
\begin_inset Quotes fld
\end_inset

PRP_Trailer_T_remove_trailer
\begin_inset Quotes frd
\end_inset

 um diesen zu entfernen, welche die meiste CPU-Zeit beanspruchen.
 Der anschliessende Write-System-Call, um das aufbereitete Frame dem virtuellen
 PRP-Interface weiterzureichen, benötigt vergleichsweise wenig CPU-Zeit.
\end_layout

\begin_layout Subsubsection
Profiling Fazit
\begin_inset CommandInset label
LatexCommand label
name "sub:Profiling-Fazit"

\end_inset


\end_layout

\begin_layout Standard
Beim Profiling aller Prozesse des Betriebssystems wird sichtbar, dass die
 Zuteilung der CPU-Zeiten stark vom Scheduler des Betriebssystems abhängt.
 Der Netzwerklastgenerator 
\begin_inset Quotes fld
\end_inset

shck
\begin_inset Quotes frd
\end_inset

 benötigt für das Erstellen und Senden der Pakete mehr CPU-Zeit als für
 das Empfangen.
 
\end_layout

\begin_layout Standard
Dies wiederum resultiert darin, dass die PRP-1-stack-Applikation des sendenden
 Hosts weniger CPU-Zeit zur Verfügung hat als diejenige des empfangenden
 Hosts.
 Bei Netzwerklasten mit überwiegend Paketen, die eine maximale Paketgrösse
 aufweisen, ist dies kein limitierender Faktor, vorausgesetzt, es befinden
 sich nicht zu viele zusätzlich laufenden Prozesse auf dem Betriebssystem,
 welche die CPU auslasten.
\end_layout

\begin_layout Standard
Die PRP-1-stack-Applikation verbringt die meiste Ausführungszeit im Kernelspace.
 Beim Transmittieren von Paketen entsteht der folgende Datenfluss:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_profiling/us_ks_overhead.svg
	lyxscale 50
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Userspace/Kernelspace-Datenfluss, PRP-1 stack transmit
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Daten, die von der ursprünglichen Applikation aus versendet wurden, werden
 vom PRP-1 stack wieder in den Userspace kopiert, und gelangen anschliessend
 erneut in den Kernelspace, um über die physischen Interfaces, eth0 und
 eth1, transmittiert zu werden.
 Dies sind zwei zusätzliche Kopiervorgänge zwischen Kernel- und Userspace,
 verglichen mit einem herkömmlichen Sendevorgang über ein physisches Netzwerk-In
terface.
\end_layout

\begin_layout Standard
Die Kopiervorgänge nehmen ein im Verhältnis grosses Zeitquantum in Anspruch,
 wie dies beispielsweise in Abbildung 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Flame-Graph-der"

\end_inset

 sichtbar ist.
 Die Funktion 
\begin_inset Quotes fld
\end_inset

__copy_from_user_ll
\begin_inset Quotes frd
\end_inset

 verbraucht einen prozentual hohen Anteil an CPU-Zeit, gegenüber anderen
 Funktionen beim Transmittieren eines Pakets.
 Wenn der PRP-1 stack auschliesslich im Kernlspace betrieben würde, könnte
 dieser Overhead vermieden werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_pie_chart_kernel_user_cpu_tcp_max.svg
	lyxscale 50
	display false
	scale 20
	special trim=0 0 290 0,clip=true

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _diagrams/021_pie_chart_kernel_user_count_tcp_max.svg
	lyxscale 50
	display false
	scale 25
	BoundingBox 0bp 0bp 1000bp 600bp

\end_inset


\end_layout

\end_inset


\begin_inset VSpace -10bp
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Grobübersicht, Anteil Kernelspace und Userspace des PRP-1 stacks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ein weiterer Aspekt, der für eine Portierung des PRP-1 stacks in ein Kernel-Modu
l sprechen würde, wäre der Umstand, dass die Funktionen des PRP-Protokolls
 (Verwalten der Duplikaterkennungs-Tabelle, etc.) in ihrer Ausführung prioritär
 vom Betriebssystem-Scheduler behandelt würden.
\end_layout

\begin_layout Standard
Dies würde auch nach sich ziehen, dass die Timer-Deadlines, welche in der
 PRP-1-stack-Implementierung eine zentrale Rolle einnehmen (Supervision
 Frames, Aging-Timer), marginal genauer eingehalten werden könnten.
 Da die Timer jedoch nur eine Genauigkeit im Bereich von Millisekunden einhalten
 müssen, wäre dieser Faktor vernachlässigbar.
\end_layout

\begin_layout Subsubsection
Weitere Aspekte
\end_layout

\begin_layout Standard
Bei der CPU-Last ist des Weiteren ein markanter Unterschied zwischen den
 Ultrakurzzeit- und Kurzzeit-Messungen der Netzwerklast mit Lasttyp 
\begin_inset Quotes fld
\end_inset

MIN
\begin_inset Quotes frd
\end_inset

 via UDP festzustellen.
 Der einzige Unterschied zwischen diesen Messungen liegt im Zeitpunkt, an
 dem die Messung beendet wird.
 Mehrere Durchläufe der Messungen ergaben stets das selbe Ergebnis.
 Zusätzlich wurde sichergestellt, dass sich die Messungen nicht beeinflussen,
 indem die Abstände zwischen den Messungen vergrössert und die Reihenfolge
 der Messungen abgeändert wurden, jedoch ohne ein anderes Ergebnis zu erzielen.
 ??? Bei einer Ultrakurzzeit-Messung des vorhin erwähnten Lasttyps, erhält
 der PRP-1 stack mehr CPU-Zeit (der Engpass durch den Prozessor ist kleiner)
 und kann somit eine höhere Bitrate erzielen.
 Diese höhere CPU-Last spiegelt sich in der TX-Bitrate des Clients, der
 RX-Bitrate des Servers und der daraus resultierenden CPU-Last des Servers
 wieder.
 ???
\end_layout

\begin_layout Standard
Ferner sind beim Server bei der CPU-Last bei einigen Netzwerklasten sehr
 langsame periodischen Schwankungen festzustellen, die beim empfangenden
 PRP-1 stack des Servers entstehen.
 Im Gegensatz der schwankenden CPU-Last bleiben die Bitraten des Servers
 jedoch konstant.
\end_layout

\begin_layout Standard
Im Fazit über das Profiling des PRP-1 stacks, siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Profiling-Fazit"

\end_inset

, wird erwähnt, dass der Scheduler des Betriebssystems einen Einfluss auf
 die unterschiedlichen CPU-Auslastungen haben könnte.
 Im Rahmen der vorliegenden Arbeit kann diese These jedoch aus Zeitgründen
 nicht näher untersucht und durch weitere Testszenarien zusätzlich belegt
 werden.
\end_layout

\begin_layout Standard
Über eine manuelle Systemüberprüfung konnten keine weiteren möglichen Einflüsse
 festgestellt werden.
 Eine Differenz bei der Netzwerklast-Generierung durch shck ist auszuschliessen,
 da für beide Messungen die selben Parameter verwendet werden und bei Ultrakurzz
eit-Messungen lediglich der Generierungs-Prozess früher per kill-Befehl
 terminiert wird.
\end_layout

\begin_layout Standard
Eine weitere Beobachtung kann bei den Schwankungsbändern (Differenz von
 Maximal- und Minimal-Wert) der unterschiedlichen Statistik-Merkmalen gemacht
 werden.
 Im Vergleich zur Steady-State-Untersuchung in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Einschwingzeit-/-Steady"

\end_inset

 fallen diese kleiner aus.
 Dies ist auf den Einfluss der gewählten Messintervallgrössen zurück zu
 führen.
 Bei der Steady-State-Untersuchung wurde ein Intervall von 0.1s selektiert,
 der Allgemeinfall, wie er u.a.
 in diesem Szenario angewandt wird, beträgt jedoch 1s.
 Die daraus entstehenden Konsequenzen werden in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Einfluss von Intervallgroessen"

\end_inset

 erläutert.
\end_layout

\begin_layout Section
Szenario 02: Performance ohne PRP
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-02:-Performance"

\end_inset


\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\begin_layout Section
Szenario 03: Effekt von Laufzeitunterscheidungen zwischen Netzwerk A und
 B / Einfluss nicht entfernter Duplikate auf Funktion und Performance
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-03:-Effekt"

\end_inset


\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\begin_layout Section
Szenario 04: Zeitweiser Ausfall eines Netzwerkpfades
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-04:-Zeitweiser"

\end_inset


\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\begin_layout Itemize
\begin_inset Quotes fld
\end_inset

prp1
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

eth1
\begin_inset Quotes frd
\end_inset

 Bitraten werden nicht beeinflusst / keine Limitierung -> nur 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
shck-Client
\end_layout

\begin_deeper
\begin_layout Itemize
Kein Einfluss auf CPU bei keinem Fall
\end_layout

\begin_layout Itemize
1s kein Durchfluss -> Zeit für Deaktivieren/Aktivieren ECI-Box zu lange
 sodass eth0 nicht wirklich aktiv wird
\end_layout

\begin_layout Itemize
2s kleine TX-Bitraten jedoch bei TCP keine/kaum Quittierungen vom Server
\end_layout

\begin_layout Itemize
3s kleine Bitraten
\end_layout

\begin_layout Itemize
4s etwas bessere Bitraten, danach nur noch marginale Verbesserungen pro
 erhöhte Sekunde der Intervallgrösse
\end_layout

\begin_deeper
\begin_layout Itemize
Diese Steigerung pro Intervallgrösse spiegelt sich in den graphischen Resultaten
 wieder (besonders ersichtlich bei Intervallgrösse von 3s)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
shck-Server
\end_layout

\begin_deeper
\begin_layout Itemize
Einfluss auf CPU, wird geringer je weniger über 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset

 versendet wird -> Muss weniger Daten verarbeiten
\end_layout

\begin_deeper
\begin_layout Itemize
Kann so weit kommen, dass Server weniger CPU für selbe Last benötigt als
 Client (Client sendet über eth0 und eth1, Server erhält nur eth1) (Normalfall
 benötigt Server mehr als Client, siehe Szenario 01)
\end_layout

\end_deeper
\begin_layout Itemize
TX-Bitrate Server entspricht der aus Szenario 01, da Verbindung zwischen
 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset

 von 
\begin_inset Quotes fld
\end_inset

srv02
\begin_inset Quotes frd
\end_inset

 zum Switch aktiv ist -> Server merkt nichts von Ausfall
\end_layout

\end_deeper
\begin_layout Itemize
Man sieht in den Grafiken wie die shck-Server TX-bitrate mit der RX-bitrate
 des Servers korrespondiert.
 TCP: RX-Bitrate Client erst ab ca.
 4s ähnlich zu TX-Bitrate Server weil Server beim Senden nichts vom Ausfall
 mitbekommt (Client erhält weniger als Server versendet)
\end_layout

\begin_layout Itemize
In grafiken bei MAX mit intervall 2s peaks über 100 -> aktivieren interface
 -> annahme: tx-buffer leeren (einfluss auf statistik-aktualisierung)
\end_layout

\begin_layout Itemize
Limitierung liegt in der Zeit, in der über 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset

 effektiv versendet wird -> Weniger versandt, kleinere Bitrate, weniger
 Server-CPU-Last
\end_layout

\begin_layout Itemize
Laut standard PRP-Supervision Frames nur wenn beide Interfaces aktiv, dann
 erkennt DAN ob anderer Host SAN oder DAN ist.
 Im PRP-1 stack ist adapter_active immer auf 1, auch wenn Kabel getrennt
 ist.
 Der stack sendet sobald adapter_active==1 ist, das heisst er weiss nichts
 vom Ausfall.
 Die an das deaktivierte Interface gesendeten Daten sind für den PRP-1 stack
 gesendet, werden jedoch nicht effektiv vom OS versendet -> korrekte /proc-Stati
stiken.
\end_layout

\begin_layout Itemize
Aging-Einträge werden überschrieben
\end_layout

\begin_layout Section
Szenario 05: Abhängigkeit vom verwendeten Protokoll (TCP/UDP)
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-05:-Abhängigkeit"

\end_inset


\end_layout

\begin_layout Standard
In diesem Abschnitt wird ein Vergleich zwischen TCP- und UDP-Verkehr vorgenommen.
 Dazu dienen die Resultate aus Szenario 01 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Szenario-01:-Performance"

\end_inset

).
 Der Vergleich zwischen reiner Layer-2- und UDP-Netzwerklast wird in Kapitel
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Erörterung-signifikanter-Resulta"

\end_inset

 durchgeführt.
\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\begin_layout Section
Szenario 06: Auswirkungen, wenn Frames out-of-sequence ankommen
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-06:-Auswirkungen,"

\end_inset


\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\begin_layout Section
Szenario 07: Einluss von Offload-Mechanismen
\begin_inset CommandInset label
LatexCommand label
name "sec:Szenario-07:-Einluss"

\end_inset


\end_layout

\begin_layout Subsection
Limitierungen / Engpässe
\end_layout

\begin_layout Subsection
Verhalten zwischen shck-Client und -Server
\end_layout

\begin_layout Subsection
Verhalten des PRP-1 stacks
\end_layout

\begin_layout Subsection
Weitere Aspekte
\end_layout

\end_body
\end_document
